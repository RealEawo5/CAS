from typing import Any, Iterable, Tuple, Union


class _Point:
    coordinates: Tuple
    shape: int

    def __init__(self, *coordinates: Union[int, float]) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __name__(self) -> str: ...
    def __iter__(self) -> Iterable: ...
    def __len__(self) -> int: ...
    def _sympy_(self) -> _Point: ...
    def __eq__(self, __value: Any) -> bool: ...
    def __ne__(self, __value: Any) -> bool: ...
    def __add__(self, __other: Any) -> '_Point': ...
    def __radd__(self, __other: Any) -> '_Point': ...
    def __sub__(self, __other: Any) -> '_Point': ...
    def __rsub__(self, __other: Any) -> '_Point': ...
    def __neg__(self) -> '_Point': ...

class Point(_Point): ...
class point(_Point): ...
class Pt(_Point): ...
class pt(_Point): ...

class Origin(_Point):
    def __init__(self, shape: int): ...


class _Vector:
    end: _Point
    start: _Point
    vec: Tuple
    shape: int

    def __init__(self, *vec: Union[int, float], start: Iterable = None, end: Iterable = None) -> None: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __name__(self) -> str: ...
    def __iter__(self) -> Iterable: ...
    def __len__(self) -> int: ...
    def _sympy_(self) -> _Vector: ...
    def __eq__(self, __value: Any) -> bool: ...
    def __ne__(self, __value: Any) -> bool: ...
    def isinverse(self, __other: _Vector) -> bool: ...
    def isparallel(self, __other: _Vector) -> bool: ...
    def isorthogonal(self, __other: _Vector) -> bool: ...
    def __add__(self, __other: Any) -> '_Vector': ...
    def __radd__(self, __other: Any) -> '_Vector': ...
    def __sub__(self, __other: Any) -> '_Vector': ...
    def __rsub__(self, __other: Any) -> '_Vector': ...
    def __mul__(self, __other: Any) -> '_Vector': ...
    def __rmul__(self, __other: Any) -> '_Vector': ...
    def __abs__(self) -> str: ...
    def __neg__(self) -> '_Vector': ...

class Vector(_Vector): ...
class vector(_Vector): ...
class Vec(_Vector): ...
class vec(_Vector): ...

class NullVector(_Vector):
    def __init__(self, shape: int): ...


# TODO: MAJOR TODO - Implement the Function class
"""
class Function:
    def __init__(expression, *variables): ...
    def __call__(self, *values) -> Any"": ...
"""
